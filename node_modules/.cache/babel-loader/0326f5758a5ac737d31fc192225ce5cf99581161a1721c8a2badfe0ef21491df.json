{"ast":null,"code":"import '../App.css';\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text, font, color, borderColor, borderWidth) {\n  return new Promise((resolve, reject) => {\n    try {\n      const fontSize = 34;\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n      canvas.style.letterSpacing = '5px';\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = color;\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n      ctx.font = `${fontSize}px '${font.name}', serif`;\n\n      // draw\n      const textLine = text.split('\\n');\n      textLine.forEach((line, i) => {\n        ctx.save();\n        const lineWidth = ctx.measureText(line).width;\n        ctx.scale(canvas.width / lineWidth, canvas.height / (fontSize * textLine.length));\n        ctx.fillText(line, 0, fontSize * 0.9 * (i + 1));\n        ctx.restore();\n      });\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}","map":{"version":3,"names":["getPng","text","font","color","borderColor","borderWidth","Promise","resolve","reject","fontSize","canvas","document","createElement","width","height","style","letterSpacing","ctx","getContext","fillStyle","strokeStyle","lineWidth","name","textLine","split","forEach","line","i","save","measureText","scale","length","fillText","restore","toDataURL","e"],"sources":["/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/utils/EmojiRenderer.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport '../App.css';\nimport { Font } from '../components/FontButton';\n\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text: string, font: Font, color: string, borderColor: string, borderWidth: number): Promise<string> {\n  return new Promise((resolve, reject) => {\n    try {      \n      const fontSize = 34;\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n      canvas.style.letterSpacing = '5px';\n      const ctx = canvas.getContext('2d')!;\n      ctx.fillStyle = color;\n      ctx.strokeStyle = borderColor\n      ctx.lineWidth = borderWidth;\n      \n      ctx.font = `${fontSize}px '${font.name}', serif`;\n\n      // draw\n      const textLine = text.split('\\n');\n      textLine.forEach((line, i) => {\n        ctx.save();\n        const lineWidth = ctx.measureText(line).width;\n        ctx.scale(canvas.width / lineWidth, canvas.height / (fontSize * textLine.length));\n        ctx.fillText(line, 0, (fontSize * 0.9) * (i + 1));\n        ctx.restore();\n      });\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}"],"mappings":"AACA,OAAO,YAAY;AAGnB;AACA;AACA;AACA,OAAO,eAAeA,MAAMA,CAACC,IAAY,EAAEC,IAAU,EAAEC,KAAa,EAAEC,WAAmB,EAAEC,WAAmB,EAAmB;EAC/H,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,EAAE;MACnB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,KAAK,GAAG,GAAG;MAClBH,MAAM,CAACI,MAAM,GAAG,GAAG;MACnBJ,MAAM,CAACK,KAAK,CAACC,aAAa,GAAG,KAAK;MAClC,MAAMC,GAAG,GAAGP,MAAM,CAACQ,UAAU,CAAC,IAAI,CAAE;MACpCD,GAAG,CAACE,SAAS,GAAGhB,KAAK;MACrBc,GAAG,CAACG,WAAW,GAAGhB,WAAW;MAC7Ba,GAAG,CAACI,SAAS,GAAGhB,WAAW;MAE3BY,GAAG,CAACf,IAAI,GAAG,GAAGO,QAAQ,OAAOP,IAAI,CAACoB,IAAI,UAAU;;MAEhD;MACA,MAAMC,QAAQ,GAAGtB,IAAI,CAACuB,KAAK,CAAC,IAAI,CAAC;MACjCD,QAAQ,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;QAC5BV,GAAG,CAACW,IAAI,CAAC,CAAC;QACV,MAAMP,SAAS,GAAGJ,GAAG,CAACY,WAAW,CAACH,IAAI,CAAC,CAACb,KAAK;QAC7CI,GAAG,CAACa,KAAK,CAACpB,MAAM,CAACG,KAAK,GAAGQ,SAAS,EAAEX,MAAM,CAACI,MAAM,IAAIL,QAAQ,GAAGc,QAAQ,CAACQ,MAAM,CAAC,CAAC;QACjFd,GAAG,CAACe,QAAQ,CAACN,IAAI,EAAE,CAAC,EAAGjB,QAAQ,GAAG,GAAG,IAAKkB,CAAC,GAAG,CAAC,CAAC,CAAC;QACjDV,GAAG,CAACgB,OAAO,CAAC,CAAC;MACf,CAAC,CAAC;MACF1B,OAAO,CAACG,MAAM,CAACwB,SAAS,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV3B,MAAM,CAAC,CAAC;IACV;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}