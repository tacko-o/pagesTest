{"ast":null,"code":"var _jsxFileName = \"/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Fonts from './resource/fonts.json';\nimport ConvertList from './resource/letter_convert_list.json';\nimport './App.css';\nimport FontButton from './FontButton';\nimport EmojiPreviewBox from './EmojiPreviewBox';\n\n/**\n * 絵文字名変換表\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst convertList = ConvertList;\nconst Main = () => {\n  _s();\n  /** 絵文字にする文字列 */\n  const [text, setText] = useState('');\n\n  /**\n   * 選択中のフォント名\n   */\n  const [selectedFont, setSelectedFont] = useState({});\n\n  /**\n   * 最大級サーバー向け文字変換関数\n   */\n  const createEmojiName = () => {\n    let convertedText = text;\n\n    // 変換表に基づいて変換\n    Object.keys(convertList).forEach(letter => {\n      convertedText.replaceAll(letter, convertList[letter]);\n    });\n\n    // 長音記号は前の文字と一致させる\n    let i = 0;\n    while (convertedText.indexOf(\"ー\", i) > -1) {\n      const preLetter = convertedText[convertedText.indexOf(\"ー\", i) - 1];\n      console.log(preLetter);\n      convertedText = convertedText.replace(\"ー\", preLetter);\n      i++;\n    }\n  };\n\n  /**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */\n  const handleTextChange = e => {\n    setText(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-header\",\n    children: [/*#__PURE__*/_jsxDEV(EmojiPreviewBox, {\n      text: text,\n      font: font,\n      color: \"#ff0000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text,\n        style: {\n          fontFamily: selectedFont\n        },\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"font\",\n        children: /* フォントボタン */\n        Fonts.map(font => {\n          return /*#__PURE__*/_jsxDEV(FontButton, {\n            text: text,\n            font: font,\n            pressed: selectedFont.name === font.name,\n            onClick: () => {\n              setSelectedFont(font);\n            }\n          }, font.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"qbeKaB76CMy+YV+afpX+FavXR2s=\");\n_c = Main;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"link\", {\n      rel: \"preconnect\",\n      href: \"https://fonts.googleapis.com\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n      href: `https://fonts.googleapis.com/css2?${Fonts.map(font => 'family=' + font.name.replaceAll(' ', '+')).join('&')}&display=swap`,\n      rel: \"stylesheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","Fonts","ConvertList","FontButton","EmojiPreviewBox","jsxDEV","_jsxDEV","Fragment","_Fragment","convertList","Main","_s","text","setText","selectedFont","setSelectedFont","createEmojiName","convertedText","Object","keys","forEach","letter","replaceAll","i","indexOf","preLetter","console","log","replace","handleTextChange","e","target","value","className","children","font","color","fileName","_jsxFileName","lineNumber","columnNumber","style","fontFamily","onChange","map","pressed","name","onClick","_c","App","rel","href","join","_c2","$RefreshReg$"],"sources":["/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Fonts from './resource/fonts.json'\nimport ConvertList from './resource/letter_convert_list.json'\nimport './App.css';\nimport FontButton from './FontButton';\nimport EmojiPreviewBox from './EmojiPreviewBox';\n\n/**\n * 絵文字名変換表\n */\nconst convertList: { [key: string]: string } = ConvertList;\n\nconst Main = () => {\n  /** 絵文字にする文字列 */\n  const [text, setText] = useState('');\n\n/**\n * 選択中のフォント名\n */\n  const [selectedFont, setSelectedFont] = useState({});\n\n  /**\n   * 最大級サーバー向け文字変換関数\n   */\n  const createEmojiName = () => {\n    let convertedText = text;\n\n    // 変換表に基づいて変換\n    Object.keys(convertList).forEach((letter: string) => {\n      convertedText.replaceAll(letter, convertList[letter]);\n    });\n\n    // 長音記号は前の文字と一致させる\n    let i = 0;\n    while (convertedText.indexOf(\"ー\", i) > -1) {\n      const preLetter = convertedText[convertedText.indexOf(\"ー\", i) - 1];\n      console.log(preLetter);\n      convertedText = convertedText.replace(\"ー\", preLetter);\n      i++;\n    }\n  }\n\n  /**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */\n  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n\n  return (\n    <div className=\"App-header\">\n      <EmojiPreviewBox text={text} font={font} color='#ff0000'/>\n      <div>\n        {/* テキスト */}\n        <textarea value={text} style={{ fontFamily: selectedFont }} onChange={handleTextChange} />\n      </div>\n      <div>\n        <span className='font'>\n          {\n            /* フォントボタン */\n            Fonts.map((font) => {\n              return <FontButton key={font.name} text={text} font={font} pressed={selectedFont.name === font.name} onClick={() => { setSelectedFont(font); }} />\n            })\n          }\n        </span>\n      </div>\n    </div>\n  );\n}\n\nconst App = () => {\n  return (\n    <>\n      {/* フォント読み込み */}\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link href={`https://fonts.googleapis.com/css2?${Fonts.map((font) => 'family=' + font.name.replaceAll(' ', '+')).join('&')}&display=swap`} rel=\"stylesheet\" />\n      <div className=\"main\">\n        <Main />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}