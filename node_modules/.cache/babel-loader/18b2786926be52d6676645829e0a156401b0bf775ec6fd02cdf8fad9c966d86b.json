{"ast":null,"code":"import'../App.css';/**\n * プレビュー用canvas描画\n */export async function getPng(text,font,color,yOffset,borderColor,borderWidth){return new Promise(async(resolve,reject)=>{try{const canvas=document.createElement('canvas');canvas.width=128;canvas.height=128;const textLine=text.split('\\n');const fontSize=canvas.width/textLine.length;const ctx=canvas.getContext('2d');ctx.fillStyle=color;ctx.strokeStyle=borderColor;ctx.lineWidth=borderWidth;ctx.lineJoin='round';ctx.textBaseline='top';ctx.font=`${fontSize}px '${font.name}', serif`;// stroke\nif(borderWidth>0){textLine.forEach((line,i)=>{ctx.save();//const lineWidth = ctx.measureText(line).width;\nctx.strokeText(line,canvas.width*0.05,fontSize*0.9*i+fontSize*0.05+yOffset,canvas.width*0.9);ctx.restore();});}// fill\ntextLine.forEach((line,i)=>{ctx.save();ctx.fillText(line,canvas.width*0.05,fontSize*0.92*i+fontSize*0.05+yOffset,canvas.width*0.9);ctx.restore();});resolve(canvas.toDataURL());}catch(e){reject();}});}/**\n * Y軸オフセットを返す。\n * ブラウザによってy軸方向の描画がずれてるので計算する\n * @param canvas 絵文字が描画されたキャンバス\n * @returns Yオフセット\n */export function getYOffset(font){try{const canvas=document.createElement('canvas');canvas.width=128;canvas.height=128;const ctx=canvas.getContext('2d');ctx.textBaseline='top';ctx.font=`128px '${font.name}', serif`;// fill\nctx.fillText(\"F\",0,0);const data=ctx.getImageData(0,0,canvas.width,canvas.height).data;for(var i=0;i<data.length;i+=4){// データ4つでrgba 1px分\n// 一番上の行から走査して最初に0以上の値が出てきたピクセルを確保\nif(data[i]!==0||data[i+1]!==0||data[i+2]!==0||data[i+3]!==0){console.log(data[i],data[i+1],data[i+2],data[i+3]);break;}}i++;// 一番上の行を計算\nconst yOffset=Math.floor(canvas.width/Math.floor(i/4));console.log(yOffset);ctx.clearRect(0,0,canvas.width,canvas.height);ctx.restore();//return -yOffset;\nreturn canvas.toDataURL();}catch(e){throw e;}}","map":{"version":3,"names":["getPng","text","font","color","yOffset","borderColor","borderWidth","Promise","resolve","reject","canvas","document","createElement","width","height","textLine","split","fontSize","length","ctx","getContext","fillStyle","strokeStyle","lineWidth","lineJoin","textBaseline","name","forEach","line","i","save","strokeText","restore","fillText","toDataURL","e","getYOffset","data","getImageData","console","log","Math","floor","clearRect"],"sources":["/Users/tadashi_o/ゆうた/other/pagesTest/src/utils/EmojiRenderer.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport '../App.css';\nimport { Font } from '../components/FontButton';\n\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text: string, font: Font, color: string, yOffset: number, borderColor: string, borderWidth: number): Promise<string> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n\n      const textLine = text.split('\\n');\n      const fontSize = canvas.width / textLine.length;\n\n      const ctx = canvas.getContext('2d')!;\n      ctx.fillStyle = color;\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n      ctx.lineJoin = 'round';\n      ctx.textBaseline = 'top';\n      ctx.font = `${fontSize}px '${font.name}', serif`;\n\n      // stroke\n      if (borderWidth > 0) {\n        textLine.forEach((line, i) => {\n          ctx.save();\n          //const lineWidth = ctx.measureText(line).width;\n          ctx.strokeText(line, canvas.width * 0.05, (fontSize * 0.9 * i) + fontSize * 0.05 + yOffset, canvas.width * 0.9);\n          ctx.restore();\n        });\n      }\n\n      // fill\n      textLine.forEach((line, i) => {\n        ctx.save();\n        ctx.fillText(line, canvas.width * 0.05, (fontSize * 0.92 * i) + fontSize * 0.05 + yOffset, canvas.width * 0.9);\n        ctx.restore();\n      });\n\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}\n\n/**\n * Y軸オフセットを返す。\n * ブラウザによってy軸方向の描画がずれてるので計算する\n * @param canvas 絵文字が描画されたキャンバス\n * @returns Yオフセット\n */\nexport function getYOffset(font: Font): string {\n  try {\n    const canvas = document.createElement('canvas');\n    canvas.width = 128;\n    canvas.height = 128;\n    \n    const ctx = canvas.getContext('2d')!;\n    ctx.textBaseline = 'top';\n    ctx.font = `128px '${font.name}', serif`;\n\n    // fill\n    ctx.fillText(\"F\", 0, 0);\n    const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n    for (var i = 0; i < data.length; i += 4) {\n      // データ4つでrgba 1px分\n      // 一番上の行から走査して最初に0以上の値が出てきたピクセルを確保\n      if (data[i] !== 0 || data[i + 1] !== 0 || data[i + 2] !== 0 || data[i + 3] !== 0) {\n        console.log(data[i], data[i + 1], data[i + 2], data[i + 3]);\n        break;\n      }\n    }\n    i++;\n\n    // 一番上の行を計算\n    const yOffset = Math.floor(canvas.width / Math.floor(i / 4));\n    console.log(yOffset);\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n\n    //return -yOffset;\n\n    return canvas.toDataURL();\n  } catch (e) {\n    throw e;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}