{"ast":null,"code":"import React,{useState}from'react';import Fonts from'./fonts.json';import ConvertList from'./letter_convert_list.json';import'./App.css';/**\n * 読み込むフォントリスト\n */import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const fontList=Fonts;/**\n * 絵文字名変換表\n */const convertList=ConvertList;const Main=()=>{/** 絵文字にする文字列 */const[text,setText]=useState('');/** フォント名 */const[fontName,setFontName]=useState(fontList[0]!==undefined?fontList[0].name:'');const createEmojiName=()=>{Object.keys(convertList).forEach(letter=>{text.replaceAll(letter,convertList[letter]);});};/**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */const handleTextChange=e=>{setText(e.target.value);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"textarea\",{value:text,style:{fontFamily:fontName},onChange:handleTextChange})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"span\",{className:\"font\",children:/* フォント名 */Fonts.map(font=>{return/*#__PURE__*/_jsx(\"button\",{name:font.name,value:font.name,style:{fontFamily:font.name},onClick:()=>{setFontName(font.name);},children:font.displayName});})})})]});};const App=()=>{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"link\",{rel:\"preconnect\",href:\"https://fonts.googleapis.com\"}),/*#__PURE__*/_jsx(\"link\",{href:`https://fonts.googleapis.com/css2?${Fonts.map(font=>'family='+font.name.replaceAll(' ','+')).join('&')}&display=swap`,rel:\"stylesheet\"}),/*#__PURE__*/_jsx(\"div\",{className:\"main\",children:/*#__PURE__*/_jsx(Main,{})})]});};export default App;","map":{"version":3,"names":["React","useState","Fonts","ConvertList","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","fontList","convertList","Main","text","setText","fontName","setFontName","undefined","name","createEmojiName","Object","keys","forEach","letter","replaceAll","handleTextChange","e","target","value","className","children","style","fontFamily","onChange","map","font","onClick","displayName","App","rel","href","join"],"sources":["/Users/tadashi_o/ゆうた/other/pagesTest/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Fonts from './fonts.json'\nimport ConvertList from './letter_convert_list.json'\nimport './App.css';\n\n/**\n * 読み込むフォントリスト\n */\nconst fontList = Fonts;\n\n/**\n * 絵文字名変換表\n */\nconst convertList: {[key: string]: string} = ConvertList;\n\nconst Main = () => {\n  /** 絵文字にする文字列 */\n  const [text, setText] = useState('');\n\n  /** フォント名 */\n  const [fontName, setFontName] = useState(fontList[0] !== undefined ? fontList[0].name : '');\n\n  const createEmojiName = () => {\n    Object.keys(convertList).forEach((letter: string) => {\n      text.replaceAll(letter, convertList[letter]);\n    }); \n  }\n  /**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */\n  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n\n  return (\n    <div className=\"App-header\">\n      <div>\n        {/* テキスト */}\n        <textarea value={text} style={{fontFamily: fontName}} onChange={handleTextChange} />\n      </div>\n      <div>\n        <span className='font'>\n          {\n            /* フォント名 */\n            Fonts.map((font) => {\n              return <button name={font.name} value={font.name} style={{fontFamily: font.name}} onClick={() => { setFontName(font.name) }}>{font.displayName}</button>\n            })\n          }\n        </span>\n      </div>\n    </div>\n  );\n}\n\nconst App = () => {\n  return (\n    <>\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link href={`https://fonts.googleapis.com/css2?${Fonts.map((font) => 'family=' + font.name.replaceAll(' ', '+')).join('&')}&display=swap`} rel=\"stylesheet\" />\n      <div className=\"main\">\n        <Main />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAeC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,cAAc,CAChC,MAAO,CAAAC,WAAW,KAAM,4BAA4B,CACpD,MAAO,WAAW,CAElB;AACA;AACA,GAFA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAGA,KAAM,CAAAC,QAAQ,CAAGR,KAAK,CAEtB;AACA;AACA,GACA,KAAM,CAAAS,WAAoC,CAAGR,WAAW,CAExD,KAAM,CAAAS,IAAI,CAAGA,CAAA,GAAM,CACjB,gBACA,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAEpC,YACA,KAAM,CAACc,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAACS,QAAQ,CAAC,CAAC,CAAC,GAAKO,SAAS,CAAGP,QAAQ,CAAC,CAAC,CAAC,CAACQ,IAAI,CAAG,EAAE,CAAC,CAE3F,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5BC,MAAM,CAACC,IAAI,CAACV,WAAW,CAAC,CAACW,OAAO,CAAEC,MAAc,EAAK,CACnDV,IAAI,CAACW,UAAU,CAACD,MAAM,CAAEZ,WAAW,CAACY,MAAM,CAAC,CAAC,CAC9C,CAAC,CAAC,CACJ,CAAC,CACD;AACF;AACA;AACA,KACE,KAAM,CAAAE,gBAAgB,CAAIC,CAAyC,EAAK,CACtEZ,OAAO,CAACY,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CACzB,CAAC,CAED,mBACErB,KAAA,QAAKsB,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzBzB,IAAA,QAAAyB,QAAA,cAEEzB,IAAA,aAAUuB,KAAK,CAAEf,IAAK,CAACkB,KAAK,CAAE,CAACC,UAAU,CAAEjB,QAAQ,CAAE,CAACkB,QAAQ,CAAER,gBAAiB,CAAE,CAAC,CACjF,CAAC,cACNpB,IAAA,QAAAyB,QAAA,cACEzB,IAAA,SAAMwB,SAAS,CAAC,MAAM,CAAAC,QAAA,CAElB,WACA5B,KAAK,CAACgC,GAAG,CAAEC,IAAI,EAAK,CAClB,mBAAO9B,IAAA,WAAQa,IAAI,CAAEiB,IAAI,CAACjB,IAAK,CAACU,KAAK,CAAEO,IAAI,CAACjB,IAAK,CAACa,KAAK,CAAE,CAACC,UAAU,CAAEG,IAAI,CAACjB,IAAI,CAAE,CAACkB,OAAO,CAAEA,CAAA,GAAM,CAAEpB,WAAW,CAACmB,IAAI,CAACjB,IAAI,CAAC,CAAC,CAAE,CAAAY,QAAA,CAAEK,IAAI,CAACE,WAAW,CAAS,CAAC,CAC1J,CAAC,CAAC,CAEA,CAAC,CACJ,CAAC,EACH,CAAC,CAEV,CAAC,CAED,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,mBACE/B,KAAA,CAAAE,SAAA,EAAAqB,QAAA,eACEzB,IAAA,SAAMkC,GAAG,CAAC,YAAY,CAACC,IAAI,CAAC,8BAA8B,CAAE,CAAC,cAC7DnC,IAAA,SAAMmC,IAAI,CAAE,qCAAqCtC,KAAK,CAACgC,GAAG,CAAEC,IAAI,EAAK,SAAS,CAAGA,IAAI,CAACjB,IAAI,CAACM,UAAU,CAAC,GAAG,CAAE,GAAG,CAAC,CAAC,CAACiB,IAAI,CAAC,GAAG,CAAC,eAAgB,CAACF,GAAG,CAAC,YAAY,CAAE,CAAC,cAC9JlC,IAAA,QAAKwB,SAAS,CAAC,MAAM,CAAAC,QAAA,cACnBzB,IAAA,CAACO,IAAI,GAAE,CAAC,CACL,CAAC,EACN,CAAC,CAEP,CAAC,CAED,cAAe,CAAA0B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}