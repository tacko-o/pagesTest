{"ast":null,"code":"import '../App.css';\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text, font, color, borderColor, borderWidth) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n      const textLine = text.split('\\n');\n      const fontSize = canvas.width / textLine.length;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = color;\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n      ctx.lineJoin = 'round';\n      ctx.textBaseline = 'top';\n      ctx.font = `${fontSize}px '${font.name}', serif`;\n      ctx.save();\n      ctx.fillText(textLine[0], canvas.width * 0.05, fontSize * 0.92 + fontSize * 0.05, canvas.width * 0.9);\n      await getYOffset(canvas);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.restore();\n\n      // stroke\n      if (borderWidth > 0) {\n        textLine.forEach((line, i) => {\n          ctx.save();\n          //const lineWidth = ctx.measureText(line).width;\n          ctx.strokeText(line, canvas.width * 0.05, fontSize * 0.9 * i + fontSize * 0.05, canvas.width * 0.9);\n          ctx.restore();\n        });\n      }\n\n      // fill\n      textLine.forEach((line, i) => {\n        ctx.save();\n        ctx.fillText(line, canvas.width * 0.05, fontSize * 0.92 * i + fontSize * 0.05, canvas.width * 0.9);\n        ctx.restore();\n      });\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}\n\n/**\n * Y軸オフセットを返す。\n * ブラウザによってy軸方向の描画がずれてるので計算する\n * @param canvas 絵文字が描画されたキャンバス\n * @returns Yオフセット\n */\nfunction getYOffset(canvas) {\n  return new Promise((resolve, reject) => {\n    try {\n      const ctx = canvas.getContext('2d');\n      const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n      for (var i = 0; i < data.length; i += 4) {\n        // データ4つでrgba 1px分\n        // 一番上の行から走査して最初に0以上の値が出てきたピクセルを確保\n        if (data[i] !== 0 || data[i + 1] !== 0 || data[i + 2] !== 0 || data[i + 3] !== 0) {\n          break;\n        }\n      }\n\n      // 一番上の行を計算\n      const yOffset = canvas.width % (i % 4);\n      console.log(i % 4);\n      resolve(yOffset);\n    } catch (e) {\n      reject();\n    }\n  });\n}","map":{"version":3,"names":["getPng","text","font","color","borderColor","borderWidth","Promise","resolve","reject","canvas","document","createElement","width","height","textLine","split","fontSize","length","ctx","getContext","fillStyle","strokeStyle","lineWidth","lineJoin","textBaseline","name","save","fillText","getYOffset","clearRect","restore","forEach","line","i","strokeText","toDataURL","e","data","getImageData","yOffset","console","log"],"sources":["/Users/tadashi_o/ゆうた/other/pagesTest/src/utils/EmojiRenderer.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport '../App.css';\nimport { Font } from '../components/FontButton';\n\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text: string, font: Font, color: string, borderColor: string, borderWidth: number): Promise<string> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n\n      const textLine = text.split('\\n');\n      const fontSize = canvas.width / textLine.length;\n\n      const ctx = canvas.getContext('2d')!;\n      ctx.fillStyle = color;\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n      ctx.lineJoin = 'round';\n      ctx.textBaseline = 'top';\n      ctx.font = `${fontSize}px '${font.name}', serif`;\n\n\n      ctx.save();\n      ctx.fillText(textLine[0], canvas.width * 0.05, (fontSize * 0.92) + fontSize * 0.05, canvas.width * 0.9);\n      await getYOffset(canvas);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.restore();\n\n      // stroke\n      if (borderWidth > 0) {\n        textLine.forEach((line, i) => {\n          ctx.save();\n          //const lineWidth = ctx.measureText(line).width;\n          ctx.strokeText(line, canvas.width * 0.05, (fontSize * 0.9 * i) + fontSize * 0.05, canvas.width * 0.9);\n          ctx.restore();\n        });\n      }\n\n      // fill\n      textLine.forEach((line, i) => {\n        ctx.save();\n        ctx.fillText(line, canvas.width * 0.05, (fontSize * 0.92 * i) + fontSize * 0.05, canvas.width * 0.9);\n        ctx.restore();\n      });\n\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}\n\n/**\n * Y軸オフセットを返す。\n * ブラウザによってy軸方向の描画がずれてるので計算する\n * @param canvas 絵文字が描画されたキャンバス\n * @returns Yオフセット\n */\nfunction getYOffset(canvas: HTMLCanvasElement): Promise<number> {\n  return new Promise((resolve, reject) => {\n    try {\n      const ctx = canvas.getContext('2d')!;\n      const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n      for (var i = 0; i < data.length; i += 4) {\n        // データ4つでrgba 1px分\n        // 一番上の行から走査して最初に0以上の値が出てきたピクセルを確保\n        if (data[i] !== 0 || data[i + 1] !== 0 || data[i + 2] !== 0 || data[i + 3] !== 0) {\n          break;\n        }\n      }\n\n      // 一番上の行を計算\n      const yOffset = canvas.width % (i % 4);\n\n      console.log(i % 4);\n\n      resolve(yOffset);\n    } catch (e) {\n      reject();\n    }\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}