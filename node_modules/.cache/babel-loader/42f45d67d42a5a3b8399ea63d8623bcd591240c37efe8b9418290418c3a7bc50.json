{"ast":null,"code":"var _jsxFileName = \"/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/components/ResultBox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../App.css';\n\n/** ResultBoxプロパティ */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ResultBox = ({\n  text,\n  font,\n  color\n}) => {\n  _s();\n  /** 結果png */\n  const [png, setPng] = useState(null);\n\n  /**\n   * プレビュー用canvas描画\n   */\n  const getPngFromString = async text => {\n    return new Promise((resolve, reject) => {\n      try {\n        const fontSize = 32;\n        const canvas = document.createElement('canvas');\n        canvas.width = 128;\n        canvas.height = 128;\n        const ctx = canvas.getContext('2d');\n        const textWidth = ctx.measureText(text).width;\n        ctx.fillStyle = color;\n        ctx.font = `${fontSize}px '${font.name}', serif`;\n\n        // draw\n        const textLine = text.split('\\n');\n        textLine.forEach((line, i) => {\n          ctx.save();\n          ctx.scale(canvas.width / textWidth, 4 / textLine.length);\n          ctx.fillText(line, 0, (fontSize - 4) * (i + 1));\n          ctx.restore();\n        });\n        resolve(canvas.toDataURL());\n      } catch (e) {\n        reject();\n      }\n    });\n  };\n  useEffect(() => {\n    (async () => {\n      const png = await getPngFromString(text);\n      setPng(png);\n    })();\n  }, [text, font, color]);\n\n  /**\n   * 全角1,半角0.5として文字長を返す\n   * @param str 長さを計算する文字列\n   * @returns number 文字長\n   */\n  const getLength = str => {\n    var _str$match;\n    // 全角文字以外の文字数\n    const fullWidthLength = ((_str$match = str.match(/[^ -~｡-ﾟ]/g)) !== null && _str$match !== void 0 ? _str$match : []).length;\n\n    // 半角文字の文字数\n    const halfWidthLength = str.length - fullWidthLength;\n    return fullWidthLength + halfWidthLength * 0.6;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"reault\",\n        children: png && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comp\",\n          style: {\n            display: 'flex'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"result\",\n            src: png\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ResultBox, \"y6XfBNzLcRZuK1GDpbUq7BaSYvc=\");\n_c = ResultBox;\nexport default ResultBox;\nvar _c;\n$RefreshReg$(_c, \"ResultBox\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ResultBox","text","font","color","_s","png","setPng","getPngFromString","Promise","resolve","reject","fontSize","canvas","document","createElement","width","height","ctx","getContext","textWidth","measureText","fillStyle","name","textLine","split","forEach","line","i","save","scale","length","fillText","restore","toDataURL","e","getLength","str","_str$match","fullWidthLength","match","halfWidthLength","children","className","style","display","alt","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/components/ResultBox.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport { Font } from './FontButton';\n\n/** ResultBoxプロパティ */\ntype ResultBoxProps = {\n  text: string,\n  font: Font,\n  color: string,\n}\n\nconst ResultBox = ({ text, font, color }: ResultBoxProps) => {\n  /** 結果png */\n  const [png, setPng] = useState<string | null>(null)\n\n  /**\n   * プレビュー用canvas描画\n   */\n  const getPngFromString = async (text: string): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      try {\n        const fontSize = 32;\n        const canvas = document.createElement('canvas');\n        canvas.width = 128;\n        canvas.height = 128;\n        const ctx = canvas.getContext('2d')!;\n        const textWidth = ctx.measureText(text).width;\n        ctx.fillStyle = color;\n        ctx.font = `${fontSize}px '${font.name}', serif`;\n\n        // draw\n        const textLine = text.split('\\n');\n        textLine.forEach((line, i) => {\n          ctx.save();\n          ctx.scale(canvas.width / textWidth, 4 / textLine.length);\n          ctx.fillText(line, 0, (fontSize - 4) * (i + 1));\n          ctx.restore();\n        });\n        resolve(canvas.toDataURL());\n      } catch (e) {\n        reject();\n      }\n    });\n  }\n\n  useEffect(() => {\n    (async () => {\n      const png = await getPngFromString(text);\n      setPng(png);\n    })();\n  }, [text, font, color])\n\n  /**\n   * 全角1,半角0.5として文字長を返す\n   * @param str 長さを計算する文字列\n   * @returns number 文字長\n   */\n  const getLength = (str: string): number => {\n    // 全角文字以外の文字数\n    const fullWidthLength = (str.match(/[^ -~｡-ﾟ]/g) ?? []).length;\n\n    // 半角文字の文字数\n    const halfWidthLength = str.length - fullWidthLength;\n    return fullWidthLength + halfWidthLength * 0.6;\n  }\n\n  return (\n    <>\n      <div>\n        <span className='reault'>\n          {png && (\n            <div className=\"comp\" style={{ display: 'flex' }}>\n              <img alt=\"result\" src={png} />\n            </div>\n          )}\n        </span>\n      </div>\n    </>\n  );\n}\n\nexport default ResultBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}