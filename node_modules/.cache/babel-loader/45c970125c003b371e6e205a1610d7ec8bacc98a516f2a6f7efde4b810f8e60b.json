{"ast":null,"code":"import React,{useState}from'react';import Fonts from'./resource/fonts.json';import ConvertList from'./resource/letter_convert_list.json';import'./App.css';import FontButton from'./components/FontButton';import ResultBox from'./components/ResultBox';/**\n * 絵文字名変換表\n */import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const convertList=ConvertList;const Main=()=>{/** 絵文字にする文字列 */const[text,setText]=useState('');/**\n   * 選択中のフォント名\n   */const[selectedFont,setSelectedFont]=useState(Fonts[0]);/**\n   * 色\n   */const[color,setColor]=useState('#000000');/**\n   * 最大級サーバー向け文字変換関数\n   */const createEmojiName=()=>{let convertedText=text;// 変換表に基づいて変換\nObject.keys(convertList).forEach(letter=>{convertedText.replaceAll(letter,convertList[letter]);});// 長音記号は前の文字と一致させる\nlet i=0;while(convertedText.indexOf(\"ー\",i)>-1){const preLetter=convertedText[convertedText.indexOf(\"ー\",i)-1];console.log(preLetter);convertedText=convertedText.replace(\"ー\",preLetter);i++;}};/**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */const handleTextChange=async e=>{setText(e.target.value);};/**\n   * フォント選択ボタンクリックイベント\n   * @param e イベントハンドラ\n   */const fontButtonOnClick=font=>{setSelectedFont(font);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"textarea\",{value:text,style:{fontFamily:selectedFont.name},onChange:handleTextChange})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(FontButton,{text:text,fonts:Fonts,onClick:fontButtonOnClick})}),/*#__PURE__*/_jsx(ResultBox,{text:text,font:selectedFont,color:'#000000'})]});};const App=()=>{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"link\",{rel:\"preconnect\",href:\"https://fonts.googleapis.com\"}),/*#__PURE__*/_jsx(\"link\",{href:`https://fonts.googleapis.com/css2?${Fonts.map(font=>'family='+font.name.replaceAll(' ','+')).join('&')}&display=swap`,rel:\"stylesheet\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Emoji Generator for Misskey\"}),/*#__PURE__*/_jsx(\"div\",{className:\"main\",children:/*#__PURE__*/_jsx(Main,{})})]});};export default App;","map":{"version":3,"names":["React","useState","Fonts","ConvertList","FontButton","ResultBox","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","convertList","Main","text","setText","selectedFont","setSelectedFont","color","setColor","createEmojiName","convertedText","Object","keys","forEach","letter","replaceAll","i","indexOf","preLetter","console","log","replace","handleTextChange","e","target","value","fontButtonOnClick","font","className","children","style","fontFamily","name","onChange","fonts","onClick","App","rel","href","map","join"],"sources":["/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOMServer from \"react-dom/server\";\nimport Fonts from './resource/fonts.json'\nimport ConvertList from './resource/letter_convert_list.json'\nimport './App.css';\nimport FontButton, { Font } from './components/FontButton';\nimport ResultBox from './components/ResultBox';\n\n/**\n * 絵文字名変換表\n */\nconst convertList: { [key: string]: string } = ConvertList;\n\nconst Main = () => {\n  /** 絵文字にする文字列 */\n  const [text, setText] = useState('');\n\n  /**\n   * 選択中のフォント名\n   */\n  const [selectedFont, setSelectedFont] = useState(Fonts[0]);\n\n  /**\n   * 色\n   */\n  const [color, setColor] = useState('#000000');\n\n  /**\n   * 最大級サーバー向け文字変換関数\n   */\n  const createEmojiName = () => {\n    let convertedText = text;\n\n    // 変換表に基づいて変換\n    Object.keys(convertList).forEach((letter: string) => {\n      convertedText.replaceAll(letter, convertList[letter]);\n    });\n\n    // 長音記号は前の文字と一致させる\n    let i = 0;\n    while (convertedText.indexOf(\"ー\", i) > -1) {\n      const preLetter = convertedText[convertedText.indexOf(\"ー\", i) - 1];\n      console.log(preLetter);\n      convertedText = convertedText.replace(\"ー\", preLetter);\n      i++;\n    }\n  }\n  /**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */\n  const handleTextChange = async (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n\n  /**\n   * フォント選択ボタンクリックイベント\n   * @param e イベントハンドラ\n   */\n  const fontButtonOnClick = (font: Font) => {\n    setSelectedFont(font);\n  }\n\n  return (\n    <div className=\"App-header\">\n      <div>\n        {/* テキスト */}\n        <textarea value={text} style={{ fontFamily: selectedFont.name }} onChange={handleTextChange} />\n      </div>\n      <div>\n        { /* フォントボタン群 */}\n        <FontButton text={text} fonts={Fonts} onClick={fontButtonOnClick} />\n      </div>\n      {/* プレビュー */}\n      <ResultBox text={text} font={selectedFont} color={'#000000'} />\n    </div>\n  );\n}\n\nconst App = () => {\n  return (\n    <>\n      {/* フォント読み込み */}\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link href={`https://fonts.googleapis.com/css2?${Fonts.map((font) => 'family=' + font.name.replaceAll(' ', '+')).join('&')}&display=swap`} rel=\"stylesheet\" />\n      <h1>Emoji Generator for Misskey</h1>\n      <div className=\"main\">\n        <Main />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}