{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../App.css';\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text, color, font) {\n  _s();\n  const [textLine, setTextLine] = useState(text.split('\\n'));\n  return new Promise((resolve, reject) => {\n    try {\n      const fontSize = 32;\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = color;\n      ctx.font = `${fontSize}px '${font.name}', serif`;\n\n      // draw\n      const textLine = text.split('\\n');\n      textLine.forEach((line, i) => {\n        ctx.save();\n        const lineWidth = ctx.measureText(line).width;\n        ctx.scale(canvas.width / lineWidth, 4 / textLine.length);\n        ctx.fillText(line, 0, (fontSize - 4) * (i + 1));\n        ctx.restore();\n      });\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}\n_s(getPng, \"msijiuh9o0uxpXS7geOlQE5bmTE=\");","map":{"version":3,"names":["useState","getPng","text","color","font","_s","textLine","setTextLine","split","Promise","resolve","reject","fontSize","canvas","document","createElement","width","height","ctx","getContext","fillStyle","name","forEach","line","i","save","lineWidth","measureText","scale","length","fillText","restore","toDataURL","e"],"sources":["/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/utils/EmojiRenderer.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport '../App.css';\nimport { Font } from '../components/FontButton';\n\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text: string, color: string, font: Font): Promise<string> {\n  const [textLine, setTextLine] = useState(text.split('\\n'));\n  return new Promise((resolve, reject) => {\n    try {\n      const fontSize = 32;\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n      const ctx = canvas.getContext('2d')!;\n      ctx.fillStyle = color;\n      ctx.font = `${fontSize}px '${font.name}', serif`;\n\n      // draw\n      const textLine = text.split('\\n');\n      textLine.forEach((line, i) => {\n        ctx.save();\n        const lineWidth = ctx.measureText(line).width;\n        ctx.scale(canvas.width / lineWidth, 4 / textLine.length);\n        ctx.fillText(line, 0, (fontSize - 4) * (i + 1));\n        ctx.restore();\n      });\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}"],"mappings":";AAAA,SAAoBA,QAAQ,QAAQ,OAAO;AAC3C,OAAO,YAAY;AAGnB;AACA;AACA;AACA,OAAO,eAAeC,MAAMA,CAACC,IAAY,EAAEC,KAAa,EAAEC,IAAU,EAAmB;EAAAC,EAAA;EACrF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAACE,IAAI,CAACM,KAAK,CAAC,IAAI,CAAC,CAAC;EAC1D,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,EAAE;MACnB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,KAAK,GAAG,GAAG;MAClBH,MAAM,CAACI,MAAM,GAAG,GAAG;MACnB,MAAMC,GAAG,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAE;MACpCD,GAAG,CAACE,SAAS,GAAGjB,KAAK;MACrBe,GAAG,CAACd,IAAI,GAAG,GAAGQ,QAAQ,OAAOR,IAAI,CAACiB,IAAI,UAAU;;MAEhD;MACA,MAAMf,QAAQ,GAAGJ,IAAI,CAACM,KAAK,CAAC,IAAI,CAAC;MACjCF,QAAQ,CAACgB,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;QAC5BN,GAAG,CAACO,IAAI,CAAC,CAAC;QACV,MAAMC,SAAS,GAAGR,GAAG,CAACS,WAAW,CAACJ,IAAI,CAAC,CAACP,KAAK;QAC7CE,GAAG,CAACU,KAAK,CAACf,MAAM,CAACG,KAAK,GAAGU,SAAS,EAAE,CAAC,GAAGpB,QAAQ,CAACuB,MAAM,CAAC;QACxDX,GAAG,CAACY,QAAQ,CAACP,IAAI,EAAE,CAAC,EAAE,CAACX,QAAQ,GAAG,CAAC,KAAKY,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/CN,GAAG,CAACa,OAAO,CAAC,CAAC;MACf,CAAC,CAAC;MACFrB,OAAO,CAACG,MAAM,CAACmB,SAAS,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVtB,MAAM,CAAC,CAAC;IACV;EACF,CAAC,CAAC;AACJ;AAACN,EAAA,CA1BqBJ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}