{"ast":null,"code":"import '../App.css';\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text, font, color, borderColor, borderWidth) {\n  return new Promise((resolve, reject) => {\n    try {\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n      const textLine = text.split('\\n');\n      const fontSize = canvas.width / textLine.length;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = color;\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n      ctx.lineJoin = 'round';\n      ctx.textBaseline = 'top';\n      ctx.font = `${fontSize}px '${font.name}', serif`;\n\n      // stroke\n      if (borderWidth > 0) {\n        textLine.forEach((line, i) => {\n          ctx.save();\n          //const lineWidth = ctx.measureText(line).width;\n          ctx.strokeText(line, canvas.width * 0.05, fontSize * 0.9 * i + fontSize * 0.05 + getYOffset(canvas), canvas.width * 0.9);\n          ctx.restore();\n        });\n      }\n\n      // fill\n      textLine.forEach((line, i) => {\n        ctx.save();\n        ctx.fillText(line, canvas.width * 0.05, fontSize * 0.92 * i + fontSize * 0.05 + +getYOffset(canvas), canvas.width * 0.9);\n        ctx.restore();\n      });\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}\n\n/**\n * Y軸オフセットを返す。\n * ブラウザによってy軸方向の描画がずれてるので計算する\n * @param canvas 絵文字が描画されたキャンバス\n * @returns Yオフセット\n */\nfunction getYOffset(canvas) {\n  const ctx = canvas.getContext('2d');\n  const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n  for (var i = 0; i < data.length; i += 4) {\n    // データ4つでrgba 1px分\n    // 一番上の行から走査して最初に0以上の値が出てきたピクセルを確保\n    if (data[i] !== 0 || data[i + 1] !== 0 || data[i + 2] !== 0 || data[i + 3] !== 0) {\n      break;\n    }\n  }\n\n  // 一番上の行を計算\n  const yOffset = canvas.width % (i % 4);\n  return yOffset;\n}","map":{"version":3,"names":["getPng","text","font","color","borderColor","borderWidth","Promise","resolve","reject","canvas","document","createElement","width","height","textLine","split","fontSize","length","ctx","getContext","fillStyle","strokeStyle","lineWidth","lineJoin","textBaseline","name","forEach","line","i","save","strokeText","getYOffset","restore","fillText","toDataURL","e","data","getImageData","yOffset"],"sources":["/Users/tadashi_o/ゆうた/other/pagesTest/src/utils/EmojiRenderer.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport '../App.css';\nimport { Font } from '../components/FontButton';\n\n/**\n * プレビュー用canvas描画\n */\nexport async function getPng(text: string, font: Font, color: string, borderColor: string, borderWidth: number): Promise<string> {\n  return new Promise((resolve, reject) => {\n    try {\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n\n      const textLine = text.split('\\n');\n      const fontSize = canvas.width / textLine.length;\n\n      const ctx = canvas.getContext('2d')!;\n      ctx.fillStyle = color;\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n      ctx.lineJoin = 'round';\n      ctx.textBaseline = 'top';\n      ctx.font = `${fontSize}px '${font.name}', serif`;\n\n      // stroke\n      if (borderWidth > 0) {\n        textLine.forEach((line, i) => {\n          ctx.save();\n          //const lineWidth = ctx.measureText(line).width;\n          ctx.strokeText(line, canvas.width * 0.05, (fontSize * 0.9 * i) + fontSize * 0.05 + getYOffset(canvas), canvas.width * 0.9);\n          ctx.restore();\n        });\n      }\n\n      // fill\n      textLine.forEach((line, i) => {\n        ctx.save();\n        ctx.fillText(line, canvas.width * 0.05, (fontSize * 0.92 * i) + fontSize * 0.05 +  + getYOffset(canvas), canvas.width * 0.9);\n        ctx.restore();\n      });\n      resolve(canvas.toDataURL());\n    } catch (e) {\n      reject();\n    }\n  });\n}\n\n/**\n * Y軸オフセットを返す。\n * ブラウザによってy軸方向の描画がずれてるので計算する\n * @param canvas 絵文字が描画されたキャンバス\n * @returns Yオフセット\n */\nfunction getYOffset(canvas: HTMLCanvasElement): number {\n  const ctx = canvas.getContext('2d')!;\n  const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n  for (var i=0; i<data.length; i+=4) {\n    // データ4つでrgba 1px分\n    // 一番上の行から走査して最初に0以上の値が出てきたピクセルを確保\n    if (data[i] !== 0 || data[i+1] !== 0 || data[i+2] !== 0 || data[i+3] !== 0) {\n      break;\n    }\n  }\n\n  // 一番上の行を計算\n  const yOffset = canvas.width % (i % 4);\n\n  return yOffset;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}