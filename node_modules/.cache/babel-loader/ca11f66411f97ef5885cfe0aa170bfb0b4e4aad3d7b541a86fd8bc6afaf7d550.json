{"ast":null,"code":"import React,{useEffect,useState}from'react';import Fonts from'./resources/fonts.json';import ConvertList from'./resources/letter_convert_list.json';import'./App.css';import FontButton from'./components/FontButton';import NotePreview from'./components/NotePreview';import{getPng}from'./utils/EmojiRenderer';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Main=()=>{/** 絵文字名変換表 */const convertList=ConvertList;/** 絵文字にする文字列 */const[text,setText]=useState('なにを\\nかけてあげ\\nましょうかね');/** 選択中のフォント名 */const[selectedFont,setSelectedFont]=useState(Fonts[0]);/** 文字色 */const[color,setColor]=useState('#000000');/** 境界線色 */const[borderColor,setBorderColor]=useState('#ffffff');/** 色 */const[borderWidth,setborderWidth]=useState(10);/** 絵文字画像 */const[png,setPng]=useState('');useEffect(()=>{(async()=>{setPng(await getPng(text,selectedFont,color,borderColor,borderWidth));})();},[text,selectedFont,color]);/**\n   * 最大級サーバー向け文字変換関数\n   */const createEmojiName=()=>{let convertedText=text;// 変換表に基づいて変換\nObject.keys(convertList).forEach(letter=>{convertedText.replaceAll(letter,convertList[letter]);});// 長音記号は前の文字と一致させる\nlet i=0;while(convertedText.indexOf(\"ー\",i)>-1){const preLetter=convertedText[convertedText.indexOf(\"ー\",i)-1];console.log(preLetter);convertedText=convertedText.replace(\"ー\",preLetter);i++;}};/**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */const handleTextChange=async e=>{setText(e.target.value);};/**\n   * フォント選択ボタンクリックイベント\n   * @param e イベントハンドラ\n   */const fontButtonOnClick=font=>{setSelectedFont(font);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App-header\",children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexWrap:'wrap',margin:'15px 0'},children:[/*#__PURE__*/_jsx(\"textarea\",{className:\"text\",style:{fontFamily:`${selectedFont.name}`},value:text,onChange:handleTextChange}),/*#__PURE__*/_jsx(\"span\",{className:\"emoji-preview\",children:png&&/*#__PURE__*/_jsx(\"img\",{alt:\"result\",src:png})})]}),/*#__PURE__*/_jsxs(\"div\",{style:{width:'100%',display:'flex',flexWrap:'wrap'},children:[/*#__PURE__*/_jsx(NotePreview,{png:png}),/*#__PURE__*/_jsx(NotePreview,{png:png,dark:true})]}),/*#__PURE__*/_jsx(FontButton,{text:text,fonts:Fonts,onClick:fontButtonOnClick})]});};const App=()=>{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"link\",{rel:\"preconnect\",href:\"https://fonts.googleapis.com\"}),/*#__PURE__*/_jsx(\"link\",{href:`https://fonts.googleapis.com/css2?${Fonts.map(font=>'family='+font.name.replaceAll(' ','+')).join('&')}&display=swap`,rel:\"stylesheet\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Emoji Generator for Misskey\"}),/*#__PURE__*/_jsx(\"div\",{className:\"main\",children:/*#__PURE__*/_jsx(Main,{})})]});};export default App;","map":{"version":3,"names":["React","useEffect","useState","Fonts","ConvertList","FontButton","NotePreview","getPng","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Main","convertList","text","setText","selectedFont","setSelectedFont","color","setColor","borderColor","setBorderColor","borderWidth","setborderWidth","png","setPng","createEmojiName","convertedText","Object","keys","forEach","letter","replaceAll","i","indexOf","preLetter","console","log","replace","handleTextChange","e","target","value","fontButtonOnClick","font","className","children","style","display","flexWrap","margin","fontFamily","name","onChange","alt","src","width","dark","fonts","onClick","App","rel","href","map","join"],"sources":["/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Fonts from './resources/fonts.json'\nimport ConvertList from './resources/letter_convert_list.json'\nimport './App.css';\nimport FontButton, { Font } from './components/FontButton';\nimport NotePreview from './components/NotePreview';\nimport { getPng } from './utils/EmojiRenderer';\n\nconst Main = () => {\n  /** 絵文字名変換表 */\nconst convertList: { [key: string]: string } = ConvertList;\n\n  /** 絵文字にする文字列 */\n  const [text, setText] = useState('なにを\\nかけてあげ\\nましょうかね');\n\n  /** 選択中のフォント名 */\n  const [selectedFont, setSelectedFont] = useState(Fonts[0]);\n\n  /** 文字色 */\n  const [color, setColor] = useState('#000000');\n\n  /** 境界線色 */\n  const [borderColor, setBorderColor] = useState('#ffffff');\n\n  /** 色 */\n  const [borderWidth, setborderWidth] = useState(10);\n\n  /** 絵文字画像 */\n  const [png, setPng] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      setPng(await getPng(text, selectedFont, color, borderColor, borderWidth));\n    })();\n  }, [text, selectedFont, color]);\n\n  /**\n   * 最大級サーバー向け文字変換関数\n   */\n  const createEmojiName = () => {\n    let convertedText = text;\n\n    // 変換表に基づいて変換\n    Object.keys(convertList).forEach((letter: string) => {\n      convertedText.replaceAll(letter, convertList[letter]);\n    });\n\n    // 長音記号は前の文字と一致させる\n    let i = 0;\n    while (convertedText.indexOf(\"ー\", i) > -1) {\n      const preLetter = convertedText[convertedText.indexOf(\"ー\", i) - 1];\n      console.log(preLetter);\n      convertedText = convertedText.replace(\"ー\", preLetter);\n      i++;\n    }\n  }\n  /**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */\n  const handleTextChange = async (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n\n  /**\n   * フォント選択ボタンクリックイベント\n   * @param e イベントハンドラ\n   */\n  const fontButtonOnClick = (font: Font) => {\n    setSelectedFont(font);\n  }\n\n  return (\n    <div className=\"App-header\">\n      <div style={{display: 'flex', flexWrap: 'wrap', margin: '15px 0'}}>\n        {/* テキスト */}\n        <textarea className='text' style={{fontFamily: `${selectedFont.name}`}} value={text} onChange={handleTextChange} />\n        {/* 画像プレビュー */}\n        <span className='emoji-preview'>\n        {png && <img alt=\"result\" src={png} />}\n        </span>\n      </div>\n      <div style={{width: '100%', display: 'flex', flexWrap: 'wrap'}}>\n        {/* ノートプレビュー */}\n        <NotePreview png={png}/>\n        <NotePreview png={png} dark/>\n      </div>\n      { /* フォントボタン群 */}\n      <FontButton text={text} fonts={Fonts} onClick={fontButtonOnClick} />\n    </div>\n  );\n}\n\nconst App = () => {\n  return (\n    <>\n      {/* フォント読み込み */}\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link href={`https://fonts.googleapis.com/css2?${Fonts.map((font) => 'family=' + font.name.replaceAll(' ', '+')).join('&')}&display=swap`} rel=\"stylesheet\" />\n      <h1>Emoji Generator for Misskey</h1>\n      <div className=\"main\">\n        <Main />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}