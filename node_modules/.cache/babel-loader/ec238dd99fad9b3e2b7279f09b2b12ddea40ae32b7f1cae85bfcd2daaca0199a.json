{"ast":null,"code":"import React,{useEffect,useState}from'react';import Fonts from'./resource/fonts.json';import ConvertList from'./resource/letter_convert_list.json';import'./App.css';import FontButton from'./FontButton';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";/**\n * 絵文字名変換表\n */const convertList=ConvertList;const Main=()=>{/** 絵文字にする文字列 */const[text,setText]=useState('');/**\n   * 選択中のフォント名\n   */const[selectedFont,setSelectedFont]=useState(Fonts[0]);/**\n   * 色\n   */const[color,setColor]=useState('#000000');/**\n   * 最大級サーバー向け文字変換関数\n   */const createEmojiName=()=>{let convertedText=text;// 変換表に基づいて変換\nObject.keys(convertList).forEach(letter=>{convertedText.replaceAll(letter,convertList[letter]);});// 長音記号は前の文字と一致させる\nlet i=0;while(convertedText.indexOf(\"ー\",i)>-1){const preLetter=convertedText[convertedText.indexOf(\"ー\",i)-1];console.log(preLetter);convertedText=convertedText.replace(\"ー\",preLetter);i++;}};const[png,setPng]=useState(null);useEffect(()=>{(async()=>{const png=await getPngFromString(text);setPng(png);})();},[selectedFont]);/**\n   * Canvas合成\n   * @param {string} canvas 合成結果を描画するcanvas\n   * @param {array} pngDataArr 合成するpng\n   * @returns {string} png\n   */const concatCanvas=(canvas,pngDataArr)=>{const ctx=canvas.getContext(\"2d\");for(let i=0;i<pngDataArr.length;i++){const image=new Image();image.src=pngDataArr[i];ctx.drawImage(image,0,0,canvas.width,canvas.height);}return canvas.toDataURL();};/**\n   * プレビュー用canvas描画\n   */const getPngFromString=async text=>{return new Promise((resolve,reject)=>{try{const fontSize=32;const canvas=document.createElement('canvas');canvas.width=128;canvas.height=128;const ctx=canvas.getContext('2d');ctx.fillStyle=color;ctx.font=`${fontSize}px '${selectedFont.name}', serif`;// draw\nconst textLine=text.split('\\n');textLine.forEach((line,i)=>{ctx.save();ctx.scale(4/line.length,4/textLine.length);ctx.fillText(line,0,(fontSize-4)*(i+1));ctx.restore();});resolve(canvas.toDataURL());}catch(e){reject();}});};/**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */const handleTextChange=async e=>{setText(e.target.value);const png=await getPngFromString(e.target.value);setPng(png);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"textarea\",{value:text,style:{fontFamily:selectedFont.name},onChange:handleTextChange})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"span\",{className:\"font\",children:/* フォントボタン */Fonts.map(font=>{return/*#__PURE__*/_jsx(FontButton,{text:text,font:font,pressed:selectedFont.name===font.name,onClick:()=>{setSelectedFont(font);}},font.name);})})}),png&&/*#__PURE__*/_jsx(\"div\",{className:\"comp\",style:{display:'flex'},children:/*#__PURE__*/_jsx(\"img\",{alt:\"result\",src:png})})]});};const App=()=>{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"link\",{rel:\"preconnect\",href:\"https://fonts.googleapis.com\"}),/*#__PURE__*/_jsx(\"link\",{href:`https://fonts.googleapis.com/css2?${Fonts.map(font=>'family='+font.name.replaceAll(' ','+')).join('&')}&display=swap`,rel:\"stylesheet\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Emoji Generator for Misskey\"}),/*#__PURE__*/_jsx(\"div\",{className:\"main\",children:/*#__PURE__*/_jsx(Main,{})})]});};export default App;","map":{"version":3,"names":["React","useEffect","useState","Fonts","ConvertList","FontButton","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","convertList","Main","text","setText","selectedFont","setSelectedFont","color","setColor","createEmojiName","convertedText","Object","keys","forEach","letter","replaceAll","i","indexOf","preLetter","console","log","replace","png","setPng","getPngFromString","concatCanvas","canvas","pngDataArr","ctx","getContext","length","image","Image","src","drawImage","width","height","toDataURL","Promise","resolve","reject","fontSize","document","createElement","fillStyle","font","name","textLine","split","line","save","scale","fillText","restore","e","handleTextChange","target","value","className","children","style","fontFamily","onChange","map","pressed","onClick","display","alt","App","rel","href","join"],"sources":["/Volumes/EXTHDD/Macmini/misskey/emojiCreator/pagesTest/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOMServer from \"react-dom/server\";\nimport Fonts from './resource/fonts.json'\nimport ConvertList from './resource/letter_convert_list.json'\nimport './App.css';\nimport FontButton from './FontButton';\nimport EmojiPreviewBox from './EmojiPreviewBox';\n\n/**\n * 絵文字名変換表\n */\nconst convertList: { [key: string]: string } = ConvertList;\n\nconst Main = () => {\n  /** 絵文字にする文字列 */\n  const [text, setText] = useState('');\n\n  /**\n   * 選択中のフォント名\n   */\n  const [selectedFont, setSelectedFont] = useState(Fonts[0]);\n\n  /**\n   * 色\n   */\n  const [color, setColor] = useState('#000000');\n\n  /**\n   * 最大級サーバー向け文字変換関数\n   */\n  const createEmojiName = () => {\n    let convertedText = text;\n\n    // 変換表に基づいて変換\n    Object.keys(convertList).forEach((letter: string) => {\n      convertedText.replaceAll(letter, convertList[letter]);\n    });\n\n    // 長音記号は前の文字と一致させる\n    let i = 0;\n    while (convertedText.indexOf(\"ー\", i) > -1) {\n      const preLetter = convertedText[convertedText.indexOf(\"ー\", i) - 1];\n      console.log(preLetter);\n      convertedText = convertedText.replace(\"ー\", preLetter);\n      i++;\n    }\n  }\n\n  const [png, setPng] = useState<string | null>(null)\n\n  useEffect(() => {\n    (async () => {\n      const png = await getPngFromString(text);\n      setPng(png);\n    })();\n  }, [selectedFont])\n\n  /**\n   * Canvas合成\n   * @param {string} canvas 合成結果を描画するcanvas\n   * @param {array} pngDataArr 合成するpng\n   * @returns {string} png\n   */\n  const concatCanvas = (canvas: HTMLCanvasElement, pngDataArr: string[]): string => {\n    const ctx = canvas.getContext(\"2d\")!;\n\n    for (let i = 0; i < pngDataArr.length; i++) {\n      const image = new Image();\n      image.src = pngDataArr[i];\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    }\n\n    return canvas.toDataURL();\n  }\n\n  /**\n   * プレビュー用canvas描画\n   */\n  const getPngFromString = async (text: string): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      try {\n      const fontSize = 32;\n      const canvas = document.createElement('canvas');\n      canvas.width = 128;\n      canvas.height = 128;\n      const ctx = canvas.getContext('2d')!;\n      ctx.fillStyle = color;\n      ctx.font = `${fontSize}px '${selectedFont.name}', serif`;\n\n      // draw\n      const textLine = text.split('\\n');\n      textLine.forEach((line, i) => {\n        ctx.save();        \n        ctx.scale(4 / line.length, 4 / textLine.length);\n        ctx.fillText(line, 0, (fontSize - 4) * (i + 1));\n        ctx.restore();\n      });\n      resolve(canvas.toDataURL());\n    } catch(e) {\n      reject();\n    }\n    });\n  }\n\n  /**\n   * テキストエリア要素変更イベント\n   * @param e textarea要素変更イベント\n   */\n  const handleTextChange = async (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n    const png = await getPngFromString(e.target.value);\n    setPng(png);\n  };\n\n  return (\n    <div className=\"App-header\">\n      <div>\n        {/* テキスト */}\n        <textarea value={text} style={{ fontFamily: selectedFont.name }} onChange={handleTextChange} />\n      </div>\n      <div>\n        <span className='font'>\n          {\n            /* フォントボタン */\n            Fonts.map((font) => {\n              return <FontButton key={font.name} text={text} font={font} pressed={selectedFont.name === font.name} onClick={() => { setSelectedFont(font); }} />\n            })\n          }\n        </span>\n      </div>\n      {/* プレビュー */}\n      {png && (\n        <div className=\"comp\" style={{ display: 'flex' }}>\n          <img alt=\"result\" src={png} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst App = () => {\n  return (\n    <>\n      {/* フォント読み込み */}\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link href={`https://fonts.googleapis.com/css2?${Fonts.map((font) => 'family=' + font.name.replaceAll(' ', '+')).join('&')}&display=swap`} rel=\"stylesheet\" />\n      <h1>Emoji Generator for Misskey</h1>\n      <div className=\"main\">\n        <Main />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}